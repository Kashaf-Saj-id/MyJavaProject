-------------------------------------------
               Generics in Java
-------------------------------------------

Generics allow classes, interfaces, and methods to operate on objects of various types while providing compile-time type safety. By using generics, you can write a class or method that works with any type of data, and the compiler ensures that the correct type is used. This eliminates the need for casting and helps avoid runtime errors.

1. **Generics in the Box Class (Generics.java)**:
   - In the `Box` class, the type `T` is a placeholder that can be replaced with any type when an object is created.
   - Example:
     ```java
     Box<String> stringBox = new Box<>();
     stringBox.setValue("Hello");
     ```
     Here, the `Box` class is instantiated with `String`, meaning `T` becomes `String`. The `setValue` and `getValue` methods operate on a `String` type.

2. **Benefits of Generics**:
   - **Type Safety**: Using generics ensures that only valid types are added to collections or boxes, catching type errors at compile time instead of at runtime.
   - **Code Reusability**: The same code can work with different types without duplication. The `Box` class can store any type of object (e.g., `String`, `Integer`, etc.).
   - **Readability**: Generics eliminate the need for type casting. Without generics, you might have to cast objects when retrieving them, leading to potential errors. With generics, the type is known at compile time.

3. **Generic Methods (Box1.java)**:
   - In the `Box1` class, the `print` method demonstrates a generic method where the type `T` is defined only for that method, making it flexible to accept any type of item.
     ```java
     <T> void print(T item) {
         System.out.println(item);
     }
     ```
     This method can be called with any type, and the compiler ensures that the correct type is used.

4. **Generics in Nested Interfaces (Box1.java)**:
   - The `Container` interface within `Box1` is a generic interface that works with any type `T`. This allows the interface to handle different types of data in the methods `add` and `get`.

5. **How Generics Improve Code Quality**:
   - **Compile-Time Type Checking**: Generics allow the compiler to catch type mismatches at compile time, preventing runtime errors.
   - **Code Reusability**: You can write a generic class or method that works with any data type without rewriting code for each specific type.

Generics are a powerful feature in Java, providing type safety, code reusability, and flexibility. They allow you to write cleaner and more efficient code without sacrificing type safety.

-------------------------------------------
